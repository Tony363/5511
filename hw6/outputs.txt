Test 1: Insertions and In-order Traversal
In-order traversal: [10, 20, 25, 30, 40, 50]
               R----50
          R----40
     Root----30
               R----25
          L----20
               L----10

Balance factors after insertions:
Node 10 has balance factor 0
Node 20 has balance factor 0
Node 25 has balance factor 0
Node 30 has balance factor 0
Node 40 has balance factor -1
Node 50 has balance factor 0
--------------------------------------------------
Test 2: Search Functionality
Key 25 found in the AVL tree.
Key 15 not found in the AVL tree.
Key 50 found in the AVL tree.
--------------------------------------------------
Test 3: Deletions and Balance Verification
Deleting key 20
In-order traversal after deletion: [10, 25, 30, 40, 50]
               R----50
          R----40
     Root----30
          L----25
               L----10
Balance factors after deletion:
Node 10 has balance factor 0
Node 25 has balance factor 1
Node 30 has balance factor 0
Node 40 has balance factor -1
Node 50 has balance factor 0
------------------------------
Deleting key 30
In-order traversal after deletion: [10, 25, 40, 50]
          R----50
     Root----40
          L----25
               L----10
Balance factors after deletion:
Node 10 has balance factor 0
Node 25 has balance factor 1
Node 40 has balance factor 1
Node 50 has balance factor 0
------------------------------
Deleting key 10
In-order traversal after deletion: [25, 40, 50]
          R----50
     Root----40
          L----25
Balance factors after deletion:
Node 25 has balance factor 0
Node 40 has balance factor 0
Node 50 has balance factor 0
------------------------------
Test 4: Handling Duplicates
Inserting duplicate key 25
Inserting duplicate key 40
In-order traversal after inserting duplicates: [25, 40, 50]
          R----50
     Root----40
          L----25
Balance factors after inserting duplicates:
Node 25 has balance factor 0
Node 40 has balance factor 0
Node 50 has balance factor 0
--------------------------------------------------
Test 5: Extensive Insertions and Deletions
Extensive insertions passed.
------------------------------
Extensive deletions passed.
------------------------------
Final AVL Tree:
                              R----986
                         R----983
                              L----964
                    R----914
                              R----883
                                   L----876
                         L----868
                              L----850
               R----829
                              R----778
                         R----760
                    L----759
                              R----715
                         L----693
                              L----678
          R----655
                              R----651
                         R----644
                    R----605
                         L----566
               L----559
                         R----518
                    L----471
                         L----465
                              L----433
     Root----390
                         R----388
                    R----380
                         L----374
               R----368
                         R----353
                    L----349
                              R----345
                         L----297
          L----285
                         R----229
                              L----215
                    R----204
                              R----197
                         L----167
                              L----160
               L----115
                                   R----104
                              R----100
                         R----96
                                   R----50
                              L----47
                                   L----45
                    L----40
                              R----28
                         L----26
                              L----25
                                   L----7
Final Balance factors:
Node 7 has balance factor 0
Node 25 has balance factor 1
Node 26 has balance factor 1
Node 28 has balance factor 0
Node 40 has balance factor 0
Node 45 has balance factor 0
Node 47 has balance factor 0
Node 50 has balance factor 0
Node 96 has balance factor 0
Node 100 has balance factor -1
Node 104 has balance factor 0
Node 115 has balance factor 1
Node 160 has balance factor 0
Node 167 has balance factor 0
Node 197 has balance factor 0
Node 204 has balance factor 0
Node 215 has balance factor 0
Node 229 has balance factor 1
Node 285 has balance factor 1
Node 297 has balance factor -1
Node 345 has balance factor 0
Node 349 has balance factor 1
Node 353 has balance factor 0
Node 368 has balance factor 1
Node 374 has balance factor 0
Node 380 has balance factor 0
Node 388 has balance factor 0
Node 390 has balance factor 0
Node 433 has balance factor 0
Node 465 has balance factor 1
Node 471 has balance factor 1
Node 518 has balance factor 0
Node 559 has balance factor 0
Node 566 has balance factor 0
Node 605 has balance factor -1
Node 644 has balance factor -1
Node 651 has balance factor 0
Node 655 has balance factor -1
Node 678 has balance factor 0
Node 693 has balance factor 0
Node 715 has balance factor 0
Node 759 has balance factor 0
Node 760 has balance factor -1
Node 778 has balance factor 0
Node 829 has balance factor -1
Node 850 has balance factor 0
Node 868 has balance factor -1
Node 876 has balance factor 0
Node 883 has balance factor 1
Node 914 has balance factor 1
Node 964 has balance factor 0
Node 983 has balance factor 0
Node 986 has balance factor 0
--------------------------------------------------
All tests passed successfully!



\documentclass{article}
\usepackage{amsmath}
\usepackage{geometry}
\usepackage{algorithm}
\usepackage{algpseudocode}
\geometry{margin=1in}
\begin{document}

\title{Design and Analysis of AVL Tree}
\author{}
\date{}
\maketitle

\section*{Introduction}

An AVL (Adelson-Velsky and Landis) tree is a self-balancing Binary Search Tree (BST) where the heights of the two child subtrees of any node differ by at most one. If at any time they differ by more than one, rebalancing is performed to restore this property. This ensures that the tree remains approximately balanced, guaranteeing logarithmic time complexity for search, insert, and delete operations.

In this report, we extend the standard BST design to an AVL tree by incorporating additional mechanisms for maintaining balance. Specifically, we:

\begin{enumerate}
    \item Add a "height" attribute to each node to keep track of the height of the subtree rooted at that node.
    \item Implement insertion algorithms that perform necessary rotations to maintain the AVL balance property.
    \item Analyze the time complexity \( T(n) \) of AVL tree operations by solving their recurrence relations without using Big O notation.
\end{enumerate}

\section*{AVL Tree Modifications}

\begin{itemize}
    \item \textbf{Node Structure}:
    \begin{itemize}
        \item \texttt{key}: The value stored in the node.
        \item \texttt{left}: Reference to the left child.
        \item \texttt{right}: Reference to the right child.
        \item \texttt{height}: The height of the subtree rooted at this node.
    \end{itemize}
    \item \textbf{Balance Factor}: For any node, the balance factor is defined as:
    \[
    \text{Balance Factor} = \text{Height of Left Subtree} - \text{Height of Right Subtree}
    \]
    The AVL property requires that the balance factor of every node be -1, 0, or +1.
\end{itemize}

\section*{Insertion Algorithm}

Insertion in an AVL tree involves the following steps:

\begin{enumerate}
    \item Perform a standard BST insertion.
    \item Update the height of the ancestor nodes.
    \item Calculate the balance factor of each ancestor node.
    \item If a node becomes unbalanced, perform the appropriate rotation to rebalance the tree.
\end{enumerate}

\subsection*{Rotations}

There are four types of rotations used to rebalance an AVL tree:

\begin{enumerate}
    \item \textbf{Left Rotation (LL Rotation)}:
    \begin{algorithm}[H]
    \caption{Left Rotation}
    \begin{algorithmic}[1]
        \Procedure{LeftRotate}{$z$}
            \State $y \gets z.\text{right}$
            \State $T2 \gets y.\text{left}$
            \State $y.\text{left} \gets z$
            \State $z.\text{right} \gets T2$
            \State Update heights of $z$ and $y$
            \State \textbf{return} $y$
        \EndProcedure
    \end{algorithmic}
    \end{algorithm}

    \item \textbf{Right Rotation (RR Rotation)}:
    \begin{algorithm}[H]
    \caption{Right Rotation}
    \begin{algorithmic}[1]
        \Procedure{RightRotate}{$z$}
            \State $y \gets z.\text{left}$
            \State $T3 \gets y.\text{right}$
            \State $y.\text{right} \gets z$
            \State $z.\text{left} \gets T3$
            \State Update heights of $z$ and $y$
            \State \textbf{return} $y$
        \EndProcedure
    \end{algorithmic}
    \end{algorithm}

    \item \textbf{Left-Right Rotation (LR Rotation)}:
    \begin{algorithm}[H]
    \caption{Left-Right Rotation}
    \begin{algorithmic}[1]
        \Procedure{LeftRightRotate}{$z$}
            \State $z.\text{left} \gets$ \Call{LeftRotate}{$z.\text{left}$}
            \State \textbf{return} \Call{RightRotate}{$z$}
        \EndProcedure
    \end{algorithmic}
    \end{algorithm}

    \item \textbf{Right-Left Rotation (RL Rotation)}:
    \begin{algorithm}[H]
    \caption{Right-Left Rotation}
    \begin{algorithmic}[1]
        \Procedure{RightLeftRotate}{$z$}
            \State $z.\text{right} \gets$ \Call{RightRotate}{$z.\text{right}$}
            \State \textbf{return} \Call{LeftRotate}{$z$}
        \EndProcedure
    \end{algorithmic}
    \end{algorithm}
\end{enumerate}

\subsection*{Insertion Procedure}

\begin{algorithm}[H]
\caption{AVL Insertion}
\begin{algorithmic}[1]
    \Procedure{Insert}{$node, key$}
        \If{$node = \text{None}$}
            \State \textbf{return} \texttt{new AVLNode(key)}
        \EndIf
        \If{$key < node.\text{key}$}
            \State $node.\text{left} \gets$ \Call{Insert}{$node.\text{left}, key$}
        \ElsIf{$key > node.\text{key}$}
            \State $node.\text{right} \gets$ \Call{Insert}{$node.\text{right}, key$}
        \Else
            \State \textbf{return} $node$ \Comment{Ignore duplicates}
        \EndIf
        \State $node.\text{height} \gets 1 + \max(\text{GetHeight}(node.\text{left}), \text{GetHeight}(node.\text{right}))$
        \State $balance \gets \text{GetBalance}(node)$
        \If{$balance > 1$ \textbf{and} $key < node.\text{left}.\text{key}$}
            \State \textbf{return} \Call{RightRotate}{$node$}
        \EndIf
        \If{$balance < -1$ \textbf{and} $key > node.\text{right}.\text{key}$}
            \State \textbf{return} \Call{LeftRotate}{$node$}
        \EndIf
        \If{$balance > 1$ \textbf{and} $key > node.\text{left}.\text{key}$}
            \State $node.\text{left} \gets$ \Call{LeftRotate}{$node.\text{left}$}
            \State \textbf{return} \Call{RightRotate}{$node$}
        \EndIf
        \If{$balance < -1$ \textbf{and} $key < node.\text{right}.\text{key}$}
            \State $node.\text{right} \gets$ \Call{RightRotate}{$node.\text{right}$}
            \State \textbf{return} \Call{LeftRotate}{$node$}
        \EndIf
        \State \textbf{return} $node$
    \EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection*{Time Complexity Analysis}

The AVL tree maintains its balance by ensuring that the height of the tree remains logarithmic relative to the number of nodes. Let's analyze the time complexity \( T(n) \) for the major operations: search, insert, and delete.

\subsubsection*{Search Operation}

\begin{itemize}
    \item **Recurrence Relation**:
    \[
    T_{\text{search}}(n) = T\left(\frac{n}{2}\right) + c
    \]
    \item **Solution**:
    By solving the recurrence relation, we have:
    \[
    T_{\text{search}}(n) = c \cdot \log_2 n + d
    \]
    where \( c \) and \( d \) are constants.
\end{itemize}

\subsubsection*{Insert Operation}

\begin{itemize}
    \item **Recurrence Relation**:
    \[
    T_{\text{insert}}(n) = T\left(\frac{n}{2}\right) + c
    \]
    \item **Solution**:
    Solving the recurrence relation similarly gives:
    \[
    T_{\text{insert}}(n) = c \cdot \log_2 n + d
    \]
\end{itemize}

\subsubsection*{Delete Operation}

\begin{itemize}
    \item **Recurrence Relation**:
    \[
    T_{\text{delete}}(n) = T\left(\frac{n}{2}\right) + c
    \]
    \item **Solution**:
    Solving the recurrence relation:
    \[
    T_{\text{delete}}(n) = c \cdot \log_2 n + d
    \]
\end{itemize}

\subsubsection*{Total Time for \( m \) Operations}

Assuming that all operations (search, insert, delete) are performed \( m \) times, the total time \( T_{\text{total}}(m) \) can be expressed as:

\[
T_{\text{total}}(m) = m \cdot (c \cdot \log_2 n + d)
\]

Where:
\begin{itemize}
    \item \( c \) is the constant time per operation (search, insert, delete).
    \item \( n \) is the number of nodes in the tree at any point.
    \item \( d \) is a constant representing lower-order terms.
\end{itemize}

\section*{Conclusion}

The AVL tree enhances the standard BST by maintaining balance through rotations, ensuring that the height of the tree remains logarithmic relative to the number of nodes. This balance guarantees that search, insert, and delete operations perform efficiently, with time complexities proportional to \( \log_2 n \). The addition of the "height" attribute and the implementation of rotation mechanisms are critical for maintaining the AVL property, thereby ensuring optimal performance across all major operations.

\end{document}


class AVLNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1  # New node is initially at leaf

class AVLTree:
    def insert(self, root, key):
        # Perform normal BST insertion
        if not root:
            return AVLNode(key)
        elif key < root.key:
            root.left = self.insert(root.left, key)
        elif key > root.key:
            root.right = self.insert(root.right, key)
        else:
            return root  # Ignore duplicates

        # Update the height of the ancestor node
        root.height = 1 + max(self.getHeight(root.left),
                              self.getHeight(root.right))

        # Get the balance factor
        balance = self.getBalance(root)

        # If node is unbalanced, then try the 4 cases
        # Left Left Case
        if balance > 1 and key < root.left.key:
            return self.rightRotate(root)
        # Right Right Case
        if balance < -1 and key > root.right.key:
            return self.leftRotate(root)
        # Left Right Case
        if balance > 1 and key > root.left.key:
            root.left = self.leftRotate(root.left)
            return self.rightRotate(root)
        # Right Left Case
        if balance < -1 and key < root.right.key:
            root.right = self.rightRotate(root.right)
            return self.leftRotate(root)
        return root

    def delete(self, root, key):
        # Perform standard BST delete
        if not root:
            return root
        elif key < root.key:
            root.left = self.delete(root.left, key)
        elif key > root.key:
            root.right = self.delete(root.right, key)
        else:
            # Node with one child or no child
            if not root.left:
                return root.right
            elif not root.right:
                return root.left
            # Node with two children
            temp = self.getMinValueNode(root.right)
            root.key = temp.key
            root.right = self.delete(root.right, temp.key)

        # Update the height
        root.height = 1 + max(self.getHeight(root.left),
                              self.getHeight(root.right))

        # Get the balance factor
        balance = self.getBalance(root)

        # Balance the node if necessary
        # Left Left Case
        if balance > 1 and self.getBalance(root.left) >= 0:
            return self.rightRotate(root)
        # Left Right Case
        if balance > 1 and self.getBalance(root.left) < 0:
            root.left = self.leftRotate(root.left)
            return self.rightRotate(root)
        # Right Right Case
        if balance < -1 and self.getBalance(root.right) <= 0:
            return self.leftRotate(root)
        # Right Left Case
        if balance < -1 and self.getBalance(root.right) > 0:
            root.right = self.rightRotate(root.right)
            return self.leftRotate(root)
        return root

    def leftRotate(self, z):
        y = z.right
        T2 = y.left
        # Perform rotation
        y.left = z
        z.right = T2
        # Update heights
        z.height = 1 + max(self.getHeight(z.left),
                           self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),
                           self.getHeight(y.right))
        # Return new root
        return y

    def rightRotate(self, z):
        y = z.left
        T3 = y.right
        # Perform rotation
        y.right = z
        z.left = T3
        # Update heights
        z.height = 1 + max(self.getHeight(z.left),
                           self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),
                           self.getHeight(y.right))
        # Return new root
        return y

    def getHeight(self, node):
        if not node:
            return 0
        return node.height

    def getBalance(self, node):
        if not node:
            return 0
        return self.getHeight(node.left) - self.getHeight(node.right)

    def getMinValueNode(self, node):
        current = node
        while current.left:
            current = current.left
        return current

    def search(self, root, key):
        if root is None or root.key == key:
            return root
        elif key < root.key:
            return self.search(root.left, key)
        else:
            return self.search(root.right, key)

    def inOrder(self, root):
        if not root:
            return []
        return self.inOrder(root.left) + [root.key] + self.inOrder(root.right)

    def printTree(self, root, indent="", last='updown'):
        if root is None:
            return
        indent += "     "
        self.printTree(root.right, indent, last='right')

        print(indent, end='')
        if last == 'updown':
            print("Root----", end='')
        elif last == 'right':
            print("R----", end='')
        elif last == 'left':
            print("L----", end='')
        print(root.key)
        self.printTree(root.left, indent, last='left')

    # Additional helper methods for testing
    def isBSTUtil(self, node, left, right):
        if node is None:
            return True
        if left is not None and node.key <= left:
            return False
        if right is not None and node.key >= right:
            return False
        return self.isBSTUtil(node.left, left, node.key) and self.isBSTUtil(node.right, node.key, right)

    def isBST(self, root):
        return self.isBSTUtil(root, None, None)

    def isBalancedUtil(self, node):
        if node is None:
            return True
        balance = self.getBalance(node)
        if abs(balance) > 1:
            return False
        return self.isBalancedUtil(node.left) and self.isBalancedUtil(node.right)

    def isBalanced(self, root):
        return self.isBalancedUtil(root)

    def printBalanceFactors(self, root):
        if root is None:
            return
        self.printBalanceFactors(root.left)
        print(f"Node {root.key} has balance factor {self.getBalance(root)}")
        self.printBalanceFactors(root.right)

if __name__ == "__main__":
    avl_tree = AVLTree()
    root = None

    # Test 1: Insertions and In-order Traversal
    print("Test 1: Insertions and In-order Traversal")
    data = [10, 20, 30, 40, 50, 25]
    for key in data:
        root = avl_tree.insert(root, key)
    in_order = avl_tree.inOrder(root)
    print("In-order traversal:", in_order)
    assert in_order == sorted(data), "In-order traversal does not match sorted data."

    # Verify BST property
    assert avl_tree.isBST(root), "Tree does not satisfy BST properties."

    # Verify AVL balance
    assert avl_tree.isBalanced(root), "Tree is not balanced according to AVL properties."

    avl_tree.printTree(root)
    print("\nBalance factors after insertions:")
    avl_tree.printBalanceFactors(root)
    print("-" * 50)

    # Test 2: Search Functionality
    print("Test 2: Search Functionality")
    search_keys = [25, 15, 50]
    for key in search_keys:
        result = avl_tree.search(root, key)
        if result:
            print(f"Key {key} found in the AVL tree.")
        else:
            print(f"Key {key} not found in the AVL tree.")
        # No assertion here; it's a demonstration.

    print("-" * 50)

    # Test 3: Deletions and Balance Verification
    print("Test 3: Deletions and Balance Verification")
    keys_to_delete = [20, 30, 10]
    for key in keys_to_delete:
        print(f"Deleting key {key}")
        root = avl_tree.delete(root, key)
        in_order = avl_tree.inOrder(root)
        print("In-order traversal after deletion:", in_order)
        assert in_order == sorted([k for k in data if k not in keys_to_delete[:keys_to_delete.index(key)+1]]), \
            f"In-order traversal incorrect after deleting {key}."
        assert avl_tree.isBST(root), "Tree does not satisfy BST properties after deletion."
        assert avl_tree.isBalanced(root), f"Tree is not balanced after deleting {key}."
        avl_tree.printTree(root)
        print("Balance factors after deletion:")
        avl_tree.printBalanceFactors(root)
        print("-" * 30)

    # Test 4: Handling Duplicates
    print("Test 4: Handling Duplicates")
    duplicates = [25, 40]
    for key in duplicates:
        print(f"Inserting duplicate key {key}")
        root = avl_tree.insert(root, key)
    in_order = avl_tree.inOrder(root)
    print("In-order traversal after inserting duplicates:", in_order)
    # Ensure duplicates are not inserted
    expected = sorted(set(data) - set(keys_to_delete) | set([k for k in duplicates if k not in keys_to_delete]))
    assert in_order == sorted(set(in_order)), "Duplicates were inserted into the AVL tree."
    assert avl_tree.isBST(root), "Tree does not satisfy BST properties after inserting duplicates."
    assert avl_tree.isBalanced(root), "Tree is not balanced after inserting duplicates."
    avl_tree.printTree(root)
    print("Balance factors after inserting duplicates:")
    avl_tree.printBalanceFactors(root)
    print("-" * 50)

    # Test 5: Extensive Insertions and Deletions
    print("Test 5: Extensive Insertions and Deletions")
    import random
    random.seed(42)
    extensive_data = random.sample(range(1, 1000), 100)  # 100 unique random keys
    for key in extensive_data:
        root = avl_tree.insert(root, key)
    # Verify in-order traversal is sorted
    in_order = avl_tree.inOrder(root)
    assert in_order == sorted(in_order), "In-order traversal is not sorted after extensive insertions."
    # Verify BST and balance
    assert avl_tree.isBST(root), "Tree does not satisfy BST properties after extensive insertions."
    assert avl_tree.isBalanced(root), "Tree is not balanced after extensive insertions."
    print("Extensive insertions passed.")
    print("-" * 30)

    # Now perform random deletions
    delete_keys = random.sample(extensive_data, 50)  # Delete 50 keys
    for key in delete_keys:
        root = avl_tree.delete(root, key)
    in_order = avl_tree.inOrder(root)
    assert in_order == sorted(in_order), "In-order traversal is not sorted after extensive deletions."
    # Verify BST and balance
    assert avl_tree.isBST(root), "Tree does not satisfy BST properties after extensive deletions."
    assert avl_tree.isBalanced(root), "Tree is not balanced after extensive deletions."
    print("Extensive deletions passed.")
    print("-" * 30)

    # Final Tree Visualization
    print("Final AVL Tree:")
    avl_tree.printTree(root)
    print("Final Balance factors:")
    avl_tree.printBalanceFactors(root)
    print("-" * 50)

    print("All tests passed successfully!")

